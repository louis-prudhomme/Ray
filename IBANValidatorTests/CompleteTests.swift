//
//  CompleteTests.swift
//  IBANValidatorTests
//
//  Created by Tim Duckett on 30.10.17.
//  Copyright ¬© 2017 Tim Duckettt. All rights reserved.
//

import Quick
import Nimble

class CompleteTests: QuickSpec {
    
    override func spec() {
     
        describe("The consolidated process") {
            
            // Test IBANs generated by https://www.generateiban.com/test-iban/
            
            it("should return true for a valid IBAN", closure: {
                let ibanUnderTest = "NL11ABNA0481433284"
                expect { try IBANValidator(iban: ibanUnderTest) }.to(beTrue())
            })
            
            it("should return invalid checksum for an invalid IBAN", closure: {
                let ibanUnderTest = "NL33ABNA0481433284"
                expect { try IBANValidator(iban: ibanUnderTest) }.to(throwError { (error: Error) in
                    expect(error).to(matchError(IBANValidationError.invalidChecksum))
                    })
            })
            
            it("should return invalid countrycode for an invalid IBAN", closure: {
                let ibanUnderTest = "XY33ABNA0481433284"
                expect { try IBANValidator(iban: ibanUnderTest) }.to(throwError { (error: Error) in
                    expect(error).to(matchError(IBANValidationError.invalidCountryCode))
                })
            })

            it("should return invalid length for an invalid IBAN", closure: {
                let ibanUnderTest = "XY33ABNA0481433284XYXY33ABNA048143328433ABNA0481433284"
                expect { try IBANValidator(iban: ibanUnderTest) }.to(throwError { (error: Error) in
                    expect(error).to(matchError(IBANValidationError.invalidLength))
                })
            })

            it("should return invalid characters for an invalid IBAN", closure: {
                let ibanUnderTest = "NL11ABNA048143328*"
                expect { try IBANValidator(iban: ibanUnderTest) }.to(throwError { (error: Error) in
                    expect(error).to(matchError(IBANValidationError.invalidCharacters))
                })
            })

            it("should return invalid characters for an really invalid IBAN", closure: {
                let ibanUnderTest = "NL11ABNA04814332üê∂üê∑"
                expect { try IBANValidator(iban: ibanUnderTest) }.to(throwError { (error: Error) in
                    expect(error).to(matchError(IBANValidationError.invalidCharacters))
                })
            })
            
            it("should return true for valid IBAN series", closure: {
                
                // Test IBANs taken from https://www.iban-bic.com/sample_accounts.html
                
                let ibans = ["AL90208110080000001039531801",
                "BE68844010370034",
                "DK5750510001322617",
                "DE12500105170648489890",
                "EE342200221034126658",
                "FI9814283500171141",
                "FR7630066100410001057380116",
                "GB32ESSE40486562136016",
                "IE92BOFI90001710027952",
                "IT68D0300203280000400162854",
                "LI1008800000020176306",
                "LU761111000872960000",
                "MT98MMEB44093000000009027293051",
                "MC1112739000700011111000H79",
                "NL18ABNA0484869868",
                "NO5015032080119",
                "AT022050302101023600",
                "PL37109024020000000610000434",
                "PT50003506830000000784311",
                "SM86U0322509800000000270100",
                "SE6412000000012170145230",
                "CH3908704016075473007",
                "SK9311110000001057361004",
                "SI56031001001300933",
                "ES1020903200500041045040",
                "CZ4201000000195505030267",
                "HU29117080012054779400000000"]
                
                for iban in ibans {
                    expect(try! IBANValidator(iban: iban)).to(beTrue())
                }
                
            })

        }
        
    }
    
}
